# -*- coding: utf-8 -*-
"""오르미 3기_python_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F9JkvtTu8vNXPFGU6D_bV-bSUa5NbooI

# 주석
"""

# 이것은 주석입니다.
print('Hello, World 1!') # 이것도 주석입니다.
print('Hello, World 2!')

'''
이것은 주석입니다.
이렇게 여러줄 주석을 넣을 수 있습니다.
'''
print("Hello, World!")

"""
이것은 주석입니다.
이렇게 여러줄 주석을 넣을 수 있습니다.
"""
print("Hello, World!")

"""# 입력과 출력"""

x = input('입력해 주세요:') # 문자 열로 받는다!
x + x

print('hello world')

x = 'hello'
print(x)

print(x, x)

print(x, x, sep='-')

print('010', '0000', '1000', sep='-')

print('hello world', end='!')
print('hello world', end='~')

class Character:
    def __str__(self):
        return 'a'

    def __repr__(self):
        return 'b'

hero = Character()
print(hero)
hero

"""# 변수
* python에서 변수는 포스트잇이다. 값을 담는 것이 아니라 가리킨다!
"""

x = 10
y = x
z = y

# 오답
# z -> y -> x -> 10

# 정답
# x ┐
# y -> 10
# z ┘

x = 10
y = x
z = y
y = 20

# 오답
# x -> 10
# z -> y -> 20

# 정답
# x -> 10
# z ┘ 10
# y -> 20
x, y, z

x = 10
y = x
z = y

print(id(x), id(y), id(z))

# 변수 이름

# python의 경우 보통 스네이크 표기법으로 변수를 만듭니다.
col_sum = 10

# _는 사용하지 않는 변수에 할당합니다.
for _ in range(5): # 코드의 가독성을 올려줍니다.
    print('hello') # _가 for문 안에서 사용이 안됩니다.

# 되지만 사용하시면 사회생활이 힘듭니다.
π = 100
π + π

# 변수 타입: 변수들을 어떻게 관리하고 처리할지에 대한 '코드', 이 코드는 우리가 재정의 할 수도 있다!

x = 10
x + x # 컴퓨터 입장에서는 10도 숫자입니다.

y = '10'
y + y # 컴퓨터 입장에서는 '10'도 숫자입니다.

print(type(x))
print(type(y))

str(10) + str(10)

# 지금은 이 클래스를 이해하는 것이 중요한 것이 아닙니다.
# self가 무엇인지, other가 무엇인지 이해하는 것도 중요한 것이 아닙니다.
# 이건 다 뒤에서 배울 것입니다.
# 중요한 포인트는 +도 어딘가에 '정의'되어 있다는 것입니다.
class str(str):
    def __add__(self, other):
        return 'hello'

# 그래서 이렇게 덧셈을 했을 때 이상한 값이 출력되게 할 수도 있다는 것입니다.
str(10) + str(10)

class int(int):
    def __add__(self, a):
        return self * a

int('10') + int('10')

# 변수의 삭제
del x

"""# 정수 자료형 (int)"""

x = 10
y = -5
z = 0
print(type(x), type(y), type(z))

x = 10
result  = x * 3
result

# 진수: 수를 표현하는 방법
# 2진수 : 0 1
# 8진수 : 0 1 2 3 4 5 6 7
# 16진수: 0 1 2 3 4 5 6 7 8 9 a b c d e f

# 10진수 731 = 7 * 10^2 + 3 * 10^1 + 1 * 10^0
# 2진수  110 = 1 * 2^2 + 1 * 2^1 + 0 * 2^0

# 쉽게 계산하는 법
# 10진수 15를 2진수로 표현하면?
# 10000 - 1 == 1111

# 2진수
x = 0b110
print(x)
print(type(x))

# 8진수
x = 0o110
print(x)
print(type(x))

# 16진수
x = 0x110
print(x)
print(type(x))

bin(15)

oct(15)

hex(15)

b = int('0b11010', 2)
o = int('0o32', 8)
h = int('0x1a', 16)
print(b, o, h)

# 매우 중요한 내용, 새로운 자료형을 만났을 때 2개를 꼭 해보세요.
x = 10
print(type(x)) # 검색 키워드
print(dir(x)) # 대략적인 속성을 알 수 있습니다.

# 메직 메서드: 이 타입에 속성을 정의합니다.
abs(-5) # '__abs__'
5 + 5   # '__add__'
5 and 5 # '__and__'
bool(5) # '__bool__'
5 == 5  # '__eq__'

# 메서드: 이 타입에서 변수를 다룰 수 있는 여러 기능을 제공합니다.
# 'as_integer_ratio',
# 'bit_count',
# 'bit_length',
# 'conjugate',
# 'denominator',
# 'from_bytes',
# 'imag',
# 'numerator',
# 'real',
# 'to_bytes'

x = 5
x.bit_count() # 이걸 사용할 일은 평생에 한 번도 없을 수도 있습니다.
# 1001, 2진수로 표현하면 1이 2개다!

# 정수의 메모리 미리 적재!
# -5 ~ 256
x = 256
y = 256

print(id(x), id(y))

# 정수의 메모리 미리 적재!
# -5 ~ 256
x = 257
y = 257

print(id(x), id(y))

# 문제1
x = 100
y = 100
z = x

# 다음 화살표를 그려보세요!
# z ┐
# x -> 100
# y ┘

# 문제1
x = 258
y = 258
z = x

# 다음 화살표를 그려보세요!
# z ┐
# x -> 258
# y -> 258
print(id(x), id(y), id(z))

"""# 실수 자료형 (float)"""

x = 10.0
y = 10
print(type(x), type(y))

# 산술연산
x = 10.0
y = 2
result = x * y
print(result)
print(type(result))

# float의 특수값
# 이 특수값은 사용을 하니 기억을 해주세요.
# 어디서 주로 사용하나요? 정렬과 같은 파트에서 초깃값으로 사용을 많이 합니다.
float("inf") > 10000000000000000000000000000
float("-inf") < -999999999999999

print(2e3) # 지수표현, float형
print(2E3)

2 * (10 ** 3) # int 형

float("inf") > 10e100 # 계산에 한계인 것 같은데 확인 필요
float("inf") > 10e307
float("inf") > 10e308
# python에서는 IEEE 754 배정밀도 부동 소수점 표현
# IEEE 754 배정밀도 부동 소수점 표현에서 가장 큰 (정규화된) 유한 값은 대략 1.8 * (10 ** 308)입니다.
# 10e308는 이 근사치보다 큰 값입니다.
# int는 메모리 제한 내에서 한계 없이 표현합니다.
float("inf") == 10e308, float("inf") == 10e309

print(float('inf') > 10e307)
print(float('inf') > 10e308)

float('inf') == 10e307, float('inf') == 10e308, float('inf') == 10e309

!python --version

# 부동소숫점 문제
0.1 + 0.2
# 왜 발생하는가? 결국 컴퓨터가 연산하는 것은 10진수가 아니라 2진수인데
# 2진수 변환에서 무한수가 발생이 되므로

import decimal

# 각각 모듈 import해서 사용하셔야 합니다.
float(decimal.Decimal('.1') + decimal.Decimal('.2'))
# float(fractions.Fraction('0.1') + fractions.Fraction('0.2'))

x = 10.0
print(type(x), dir(x))

# 메서드
# 'conjugate',
# 'fromhex',
# 'hex',
# 'imag',
# 'is_integer',
# 'real'

"""# 복소수 자료형 (complex)"""

x = 3 + 4j
x

type(x), dir(x)

# 'conjugate',
# 'imag',
# 'real'

x = 3 + 4j
print(x.real)
print(x.imag)

"""# 문자열 자료형 (str)"""

x = 'hello world'
y = "hello world"
z = '''hello world''' # 여러줄 가능합니다.
k = """hello world""" # 여러줄 가능합니다.

# 회사마다 컨벤션이 다릅니다.
a = 'hello world'
b = '''hello world'''

a = '''
hello \n world
'''
a # 그냥 a를 출력했을 때
print(a) # print로 a를 출력했을 때

# 참고삼아 알아두세요. 평생에 한 두번 볼 수 있습니다.
# 참고로 r표기는 Django 2.x에서 url이 정규표현식을 쓰기 때문에
# 자주 볼 수도 있습니다. 3.x에서는 사라졌습니다.
a = r'hello \n world' # r은 raw 날것에 의미를 지니고 있습니다.
a
print(a)

i = '''안녕하세요.
저는 위니브의 대표 이호준입니다.
파이썬 참 좋아요.
여러분 정말 잘 선택하셨어요.
'''

i # 이스케이프 문자가 처리안되어 출력
print(i) # 이스케이프 문자가 처리되어 출력

# 문자열에 연산
x = 'hello'
y = 'world'
print(x + y)

x = 'hello'
print(x * 3)

# 지금은 리스트는 아니니 기억하지 않으셔도 됩니다.
# 이런 연산들은 문자열에서는 문제가 없지만
# 다른 자료형들은 아래와 같은 문제가 생깁니다.

x = [[100]*3, [10]*2]
x

x[0][0] = 1
x

x = [[[]*2]*3]*2
x[0][0] = 10
x
# 종훈님 훌륭합니다.
# id를 찍어보시면 됩니다.
# 가리키고 있는 주소가 복사되었습니다.

"""## 문자열 인덱싱"""

s = 'hello world'
s[0]

s[-1]

s[-11]

# 이거 중요합니다. 햇갈려요!
# 양수와 음수로는 한 번만 갈 수 있습니다.
s[-12] # error
s[100] # error

s = 'weniv CEO leehojun'
# s[start:stop:step]
# ':step'은 통으로 생략이 가능합니다
# start와 stop은 숫자만 생략이 가능합니다.
# 중요: slicing은 error 발생시키지 않습니다.

s[0:5]
# s[5:0]
s[:5]
s[6:]
s[0:5:2]
# 2칸씩 건너 띄는 코드는 거의 작성하지 않고(알고리즘 문제에서는 많이 사용합니다.)
# step 값으로는 -1을 많이 사용합니다.
s[::-1]
s[5:0:-1] # ????, 왜 의도한 바대로 안나왔을까요? 5부터 1까지이기 때문에 그렇습니다!
# 'weniv CEO leehojun' 여기서 5부터 시작해보세요!

s = 'leehojun.png'
# 자주쓰지만 햇갈리는 것

# 문제1 : .png를 잘라내서 없애 주세요.
s[2:-4] # step값이 음에 값이 아닙니다! 양에 값이니 뒤로 가지 않습니다.
# -4에 위치를 양에 인덱스로 변환(.에 인덱스로, 8) 후 슬라이싱합니다.

# 문제2 : png만 잘라내 주세요.
s[-3:] # 정답 (-3을 양에 인덱스로 변환하면 9부터 마지막까지 결국 [9:]와 같습니다.)
s[-1:-4] # 오답 (음에 방향으로 가려면 step값을 -로 명시해야 합니다.)
# s['g'의 위치:'.의 위치'] => s[11:8]

# 슬라이싱에서 알아두어야 할 점
# 슬라이싱이 C구현체로 되어 있어 메서드보다 통상 8배 정도 빠릅니다.
# 슬라이싱으로 copy한 객체는 얕은 복사가 됩니다.
# 애러를 뿜지 않는다.

s[-3:-0]
s[-3:0]
s[8:12]
s[-3:]

# 아래처럼 되면 x와 y는 같은 곳을 가리키게 됩니다.
x = [10, 20, 30]
y = x
print(id(x), id(y))

# 아래처럼 되면 x와 y는 다른 곳을 가리키게 됩니다.
# 아래와 같이 화살표를 전혀 다른 곳을 가리키게 할 때 사용
x = [10, 20, 30]
y = x[:]
print(id(x), id(y))

s[:-4]

"""## 문자열에 메서드"""

s = 'weniv CEO licat'
type(s), dir(s)

s = 'weniv CEO licat'
s.lower() #전체를 소문자로 바꿔주는 method
s.upper() #전체를 대문자로 바꿔주는 method

s = 'weniv CEO licat'
s.find('CEO'), s.index('CEO')

s = 'weniv CEO licat'
s.find('CTO')

s = 'weniv CEO licat'
s.index('CTO')

# 의도에 맞게 둘 다 사용합니다.
s = 'weniv CEO licat'
bool(s.find('CTO')) # 또 -1이 python에서는 index도 있기 때문에 주의해야 합니다.
bool(s.find('CTO') == -1)

# 애러가 나지 않는 코드가 좋은 코드다? X
# 애러가 적절한 곳에서 나고, 예외처리가 견고히 되어있는 코드가 좋은 코드입니다.

s = 'weniv CEO licat'
s.count('i')

'[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]'.count('1')

s = '    weniv CEO licat     '
s.strip() #양쪽 공백을 제거하는 method

'    ,!!  hello world   '.strip(' ,!')
#양쪽의 공백과 ',!'을 제거해주는 method

s = 'weniv CEO licat'
s.replace('CEO', 'CTO') #원하는 문자열을 다른 문자열로 대체할 때 사용하는 method

s = 'weniv CEO licat CEO'
s.replace('CEO', 'CTO') #원하는 문자열을 다른 문자열로 대체할 때 사용하는 method
# JavaScript와 다른 점
# 1. 정규표현식이 안됩니다.
# 2. replaceAll과 같습니다.

'hello world'.split(' ')

# 문제: '010-1000-2000'을 입력받아 01010002000 출력해주세요.
'010-1000-2000'.split('-') # 01010002000

''.join('010-1000-2000'.split('-'))

name = 'leehojun'
age = 10

print('제 이름은', name, '제 나이는', age)
print('제 이름은 %s 제 나이는 %d' % (name, age)) # 이제 사용하지 않는 문법입니다.
print('제 이름은 {} 제 나이는 {}')
print('제 이름은 {0} 제 나이는 {1}'.replace('{0}', name).replace('{1}', str(age)))
print('제 이름은 {} 제 나이는 {}'.format(name, age)) # format은 str에 메서드!
print(f'제 이름은 {name} 제 나이는 {age}') # 권고합니다.

'abcd1234'.isalnum()
'안녕'.isalnum() # 유니코드에도 적용
'こんにちは'.isalnum()
'你好'.isalnum()

# '안녕'.isascii()
# 'hello'.isascii()

'hello world'.isdigit()
'안녕'.isdigit()
'12.3'.isdigit() # 점을 찍으면 문자라고 인식합니다.
'10e10'.isdigit() # 지수표현 안됩니다.
'123'.isdigit()

'hello world'.isalpha()
'helloworld'.isalpha()

print('abcd1234'.isalpha())
print('안녕'.isalpha())
print('こんにちは'.isalpha())
print('你好'.isalpha())

print('안녕'.isascii())
print('!@ ()+'.isascii())
print('hello'.isascii())
print('hello world'.isascii())

name = 'licat'
age = 10

print('제 이름은 %s, 제 나이는 %d입니다. ' % (name, age))

s = 'licat'
s.center(11, '-') #문자열을 지정한 길이로 맞추고, 양쪽을 '-'로 채우는 method

s = ' licat '
s.center(13, '-') #문자열을 지정한 길이로 맞추고, 양쪽을 '-'로 채우는 method

s = 'hello world'
s.center(5, '-') #문자열을 지정한 길이로 맞추고, 양쪽을 '-'로 채우는 method

x = "42"
result = x.zfill(5)
print(result)  # 00042

filename = '1'.zfill(3) + ".jpg"
print(filename)

년 = '23'
월 = '9'
일 = '8'
오늘날짜 = f'{년}/{월}/{일}'
print(오늘날짜)
오늘날짜 = f'{년}/{월.zfill(2)}/{일.zfill(2)}' #원하는 양식 23/09/08
print(오늘날짜)

table = str.maketrans("abc", "123")
'akbkckdkek'.translate(table)

table = str.maketrans('b', 'k', 'de')
'abcde'.translate(table)

table = str.maketrans('\n\t', '  ') # 똑같은 길이를 가지고 있어야 함
'weniv \n\n\n CEO \t\t\t licat'.translate(table)

table = str.maketrans('\n\t', ' 1') # 똑같은 길이를 가지고 있어야 함
'weniv \n\n\n CEO \t\t\t licat'.translate(table)

"""# 연습문제 풀이"""

# 카카오 코딩테스트 비밀지도
n = 5
arr1 = [9, 20, 28, 18, 11]
arr2 = [30, 1, 21, 17, 28]

# keep해야할 포인트
# 1. 2진수는 정수형이다
# 2. 다만 bin()은 문자열이다

# bin(arr1[0]) # 01001
# bin(arr2[0]) # 11110

bin(arr1[0] | arr2[0])
bin(arr1[0] | arr2[0])[2:].replace('1', '#').replace('0', ' ')

# 다 오늘 배운 것이니 위에 것은 잊으셔도 아래 것은 기억해주세요!
bin(31)[2:].replace('1', '#').replace('0', ' ')
bin(3)[2:].zfill(5).replace('1', '#').replace('0', ' ')

# 연습문제 369 게임
# '336699' => 6번
# '123123' => 2번
# '36913699'와 같은 문자열이 입력되었을 때 박수를 몇 번 치는지 코드를 작성해주세요.
# 세팅
s = '36913699'
# 정답
s.count('3') + s.count('6') + s.count('9')

# 심화문제
# '36913699'여기까지 오는동안 박수는 몇번 쳤을까요?
# 숫자가 너무 크니 숫자를 줄여 드리도록 하겠습니다. 숫자는 100입니다.
# 세팅
s = str(list(range(101)))
# 정답
s.count('3') + s.count('6') + s.count('9')

"""# 연습문제 풀이
```
문제1 문자열 s에 마지막에 있는 문자열을 2번 더 붙이는 코드를 작성해주세요.
예) s = 'jun'
정답) s = 'junnn'

문제2 대문자는 소문자로 치환하는 코드를 작성해주세요.
예)  s = 'Jun'
정답) s = 'jun'

문제3 'abcde', 숫자, 대쉬(-), 언더스코어(_)를 모두 제거해주세요.
얘) s = 'hello_world123'
정답 s = 'hlloworl'

```
"""

s = 'jun'
s = s + s[-1] * 2
print(s)

s = 'Jun'
s = s.lower()
print(s)

s = 'hello_world123'
table = str.maketrans('', '', 'abcde0123456789-_')
s.translate(table)

"""# 논리 자료형 (bool)"""

x = True
y = False
z = 10 > 3
print(x, y, z)

print(True / False)

x = True
dir(x)

"""# None"""

# None + 5
# None + None
# None = 10

# x = [10, 20, None, 30, 40]
# x[0] + x[1] + x[2]
# None이 수치연산이 안됩니다.

x = None
y = None
print(id(x), id(y))

x = None

print(x == None)    # True, 하지만 이 방식은 권장되지 않습니다.
print(x is None)    # True, 이 방식을 사용하여 None을 확인하는 것이 좋습니다.

class Character:
    def __init__(self, hp, mp):
        self.hp = hp
        self.mp = mp

    def __eq__(self, other):
        return True

주인공 = Character(100, 100)

print(주인공 == None)
print(주인공 is None) # is는 id 값을 기준으로 판단

id(주인공)

class Character:
    def __init__(self, hp, mp):
        self.hp = hp
        self.mp = mp

    def __eq__(self, other):
        return 'hello'

    def __gt__(self, other):
        return 'world'

주인공 = Character(100, 100)

print(주인공 == None)
print(주인공 > None)

dir(3)

"""# 메서드 채이닝"""

sentence = "  Hello, World!  "
result = sentence.strip().lower().replace("world", "python")
print(result)  # "hello, python!"

sentence = "  Hello, World!  "
result = sentence.strip().lower().replace("world", "python")
# 1번 스탭 : sentence.strip() == 'Hello, World!'
# 2번 스탭 : 'Hello, World!'.lower() == 'hello, world!'
# 3번 스탭 : 'hello, world!'.replace("world", "python")
print(result)  # "hello, python!"

"  Hello, World!  ".split()

sentence = "  Hello, World!  "
result = sentence.split(' ').lower().replace("world", "python")
# 1번 스탭 : sentence.strip() == ['Hello,', 'World!']
# 2번 스탭 : ['Hello,', 'World!'].lower() # error
print(result)  # "hello, python!"

# 어떻게든 개행해 쓰고 싶다! 백슬러쉬 사용해서 개행을 할 수 있습니다.
sentence = "  Hello, World!  "
result = sentence\
.strip()\
.lower()\
.replace("world", "python")

print(result)  # "hello, python!"

# 백슬러쉬를 사용하여 개행을 하는 것은 권장하는 방법은 아닙니다.
# 회색 bar가 생긴 것 보이시나요?                                              =>
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'
'hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world'

gugudan = [f'{i} X {j} = {i*j}' for i in range(2, 10) for j in range(1, 10)]

# http://pythonstudy.xyz/python/article/511-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%94%A9-%EC%8A%A4%ED%83%80%EC%9D%BC
x = 'hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohell'
len(x)

"""# 형변환"""

월급 = input("월급을 입력하세요:")
연봉 = 월급 * 12
print(연봉)

월급 = input("월급을 입력하세요:")
연봉 = int(월급) * 12
print(연봉)

월급 = int(input("월급을 입력하세요:"))
연봉 = 월급 * 12
print(연봉)

# 어렵지만 자주 사용하는 문법이니 기억해주세요.
list(map(int, ['10', '20', '30']))

list(map(int, '12345'))

#다음 숫자에 모든 자릿수를 다 더한 값을 출력하세요
sum(map(int, '1112312311113334'))

true_int = int(True)
false_int = int(False)

print(true_int)  # 출력: 1
print(false_int)  # 출력: 0

n = 123
print(type(n))

m = 123.4
print(type(n))

n = str(n)
print(type(n))

m = str(m)
print(type(m))

m

# 소숫점을 float형으로 변환하는 것은 가능하지만
float(m)

# int형으로 변환하는 것은 가능하지 않습니다.
int(m)

# 여러분이 자주하는 실수
x = 1.0
x = str(x)
print(int(x))

x = 1.0
x = str(x)
if x.find('.') == -1:
    print(int(x))
else:
    print(float(x))

print("bool('test'):", bool('test'))
print("bool(' '):", bool(' '))
print("bool(''):", bool(''))
print("bool(100):", bool(100))
print("bool(1):", bool(1))
print("bool(0):", bool(0))
print("bool(-1):", bool(-1))


print("bool(None):", bool(None))
print("bool([]):", bool([])) # 주의(JavaScript에서는 true, Python False)
print("bool(tuple()):", bool(tuple())) # 주의
print("bool({}):", bool({})) # 주의
print("bool(set()):", bool(set())) # 주의

# 실무에서 많이 사용하는 코드
x = [1, 2, 3]
while x:
    print(x.pop())

s = '10'
print(list(s))

name = 'licat'
print(list(name))

name = 'licat'
tuple(name)

data = [('name','licat'),('age',10)]
d = dict(data)
d

s = 'weniv CEO licat'
print(set(s)) #중복을 허락하지 않고 순서가 없습니다.
print(len(set(s))) #중복을 제거한 상태로의 길이를 알려줍니다.
print(len(s))

"""# 연습문제"""

# 항상 확장자만 나오게 해주세요!
s = 'licat.jpeg'
s = 'li.cat.jpeg'

print(s.split('.')[-1])

s = 'li.cat.jpeg'
s[s.index('.')+1:]

s[::-1].split('.')[0][::-1]

s = 'li.cat.jpeg'
s.split('.')[-1]

s = 'li.cat.jpeg'
# s[s.index('.')+1:]
s.rindex('.')
s[s.rindex('.')+1:]

dir(s)